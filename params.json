{
  "name": "Libuvpp",
  "tagline": "minimal change of libuv for p2p networking",
  "body": "Porting UDT(UDP-based transport) to libuv as the transport of HTTPP(run http over udp).\t\r\nAll api is similar to tcp. it's simple to use it: \t\r\n\t1. replace tcp litera with udt, like uv_tcp_t to uv_udt_t.\t\r\n\t2. do the rest as tcp.\r\n\r\nTo build it manually, clone the repository and checkout v0.8-udt branch firstly, then do steps as below.\r\n\r\nthird-party source:\r\nUDT4 - http://udt.sourceforge.net/\r\n\r\ndiscussion group:\r\nhttps://groups.google.com/d/forum/iwebpp\r\n\r\nWiki page:\r\nhttps://github.com/InstantWebP2P/libuvpp/wiki/An-introduction-to-libuvpp\r\n\r\n\r\n# libuv [![Build Status](https://secure.travis-ci.org/joyent/libuv.png)](http://travis-ci.org/joyent/libuv)\r\n\r\nlibuv is a new platform layer for Node. Its purpose is to abstract IOCP on\r\nWindows and libev on Unix systems. We intend to eventually contain all\r\nplatform differences in this library.\r\n\r\nhttp://nodejs.org/\r\n\r\n## Features\r\n\r\n * Non-blocking TCP sockets\r\n\r\n * Non-blocking named pipes\r\n\r\n * UDP\r\n \r\n * UDT transport sockets\r\n\r\n * Timers\r\n\r\n * Child process spawning\r\n\r\n * Asynchronous DNS via c-ares or `uv_getaddrinfo`.\r\n\r\n * Asynchronous file system APIs `uv_fs_*`\r\n\r\n * High resolution time `uv_hrtime`\r\n\r\n * Current executable path look up `uv_exepath`\r\n\r\n * Thread pool scheduling `uv_queue_work`\r\n\r\n * ANSI escape code controlled TTY `uv_tty_t`\r\n\r\n * File system events Currently supports inotify, `ReadDirectoryChangesW`\r\n   and kqueue. Event ports in the near future.\r\n   `uv_fs_event_t`\r\n\r\n * IPC and socket sharing between processes `uv_write2`\r\n\r\n\r\n## Documentation\r\n\r\nSee `include/uv.h`.\r\n\r\n\r\n## Build Instructions\r\n\r\nFor GCC (including MinGW) there are two methods building: via normal\r\nmakefiles or via GYP. GYP is a meta-build system which can generate MSVS,\r\nMakefile, and XCode backends. It is best used for integration into other\r\nprojects.  The old (more stable) system is using Makefiles.\r\n\r\nTo checkout the sourcecode:\r\n\r\n    git clone https://github.com/InstantWebP2P/libuvpp.git\r\n    git checkout v0.8-udt\r\n\r\n\r\nTo build via Makefile simply execute:\r\n\r\n    make\r\n\r\nTo build with Visual Studio run the vcbuilds.bat file which will\r\ncheckout the GYP code into build/gyp and generate the uv.sln and\r\nrelated files.\r\n\r\nWindows users can also build from cmd-line using msbuild.  This is\r\ndone by running vcbuild.bat from Visual Studio command prompt.\r\n\r\nTo have GYP generate build script for another system you will need to\r\ncheckout GYP into the project tree manually:\r\n\r\n    svn co http://gyp.googlecode.com/svn/trunk build/gyp\r\n\r\nUnix users run\r\n\r\n    ./gyp_uv -f make\r\n    make -C out\r\n\r\nMacintosh users run\r\n\r\n    ./gyp_uv -f xcode\r\n    xcodebuild -project uv.xcodeproj -configuration Release -target All\r\n\r\nAndroid users run. notes: please MUST not build with BUILDTYPE=Release\r\n\r\n    $ source ./android-configure NDK_PATH gyp\r\n    $ make -C out or make uv -C out\r\n\r\n\r\n## Supported Platforms\r\n\r\nMicrosoft Windows operating systems since Windows XP SP2. It can be built\r\nwith either Visual Studio or MinGW.\r\n\r\nLinux 2.6 using the GCC toolchain.\r\n\r\nMacOS using the GCC or XCode toolchain.\r\n\r\nSolaris 121 and later using GCC toolchain.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}